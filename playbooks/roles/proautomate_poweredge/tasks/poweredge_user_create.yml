---
- name: Import idrac ips
  ansible.builtin.set_fact:
    array_ips: "{{idrac_config.idrac_ip}}"

# - debug:
#     msg: "{{array_ips}}"

# - name: setting the array ip
#   debug:
#     msg: "{{item.ip}}"
#   loop: "{{ idrac }}"

- name: setting up real ip
  set_fact:
    real_ip: "{{ real_ip }} + [ '{{ item.1.ip }}' ]"   
  when:
    item.0 in item.1.ip
  with_together:
    - "{{ array_ips }}"
    - "{{ idrac }}"

- name: Import user create configurations
  ansible.builtin.set_fact:
    user_configs: "{{ idrac_config.user.users }}"   

- name: Set base module configuration
  ansible.builtin.set_fact:
    idrac_base: "{{ idrac_base }} + ['
      idrac_ip: {{ item.0.ip }}
      validate_certs: {{ verifycert }}
      idrac_user: {{ item.0.user }}
      idrac_password: {{ item.0.password }}
      state: present' ]"
  when:
    item.1 == item.0.ip
  with_together:
    - "{{ idrac }}"
    - "{{ real_ip }}"   

# - name: Combine config
#   set_fact:
#     fs_item: "{{ fs_item }} + [ '{{ user_configs }}' ]"

- debug:
    var: user_configs
- debug:
    var: idrac_base

- name: Combine configurations
  debug:
    msg: "{{ item.0 + item.1 }}"
  with_together: 
  - "{{ user_configs }}"
  - "{{ idrac_base }}"
 # no_log: true
    
# - name: Combine configurations
#   ansible.builtin.set_fact:
#     fs_items: "{{ (fs_items | default([])) + [ item | combine(idrac_base) ] }}"
#   with_together: 
#   - "{{ user_configs }}"
#  # no_log: true

# - name: Create User for idrac
#   dellemc.openmanage.idrac_user: "{{ item.0 }}{{ item.1 }}"
#   with_together:
#     - "{{ user_configs }}"
#     - "{{ idrac_base }}"
#   register: user_create

# - name: display
#   ansible.builtin.debug:
#     msg: "{{ user_create }}"
